#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Given an input stream of EventError events, this will attempt to reparse
the rawEvents and replay them to the configured output streams.

  Usage: eventlogging-replay [-h] [--output-invalid [output]] \
              input output [output ...]

  Example:

    # Replay EventErrors from a local file into a Kafka output.
    cat ./event_errors.log | \
    eventlogging-replay \
    --output-invalid file:///tmp/failed-replay-events.log \
    stdin://
    'kafka:///brokerA:9092,brokerB:9092?async=False&topic=datacenter1.{meta[topic]}'

"""

import argparse
import logging

from eventlogging import (
    setup_logging, get_reader, get_writer, Event, create_event_error
)

ap = argparse.ArgumentParser(
    description='Reads a stream of EventError events and sends the parsed '
    'rawEvent into each configured output.',
    fromfile_prefix_chars='@')

ap.add_argument('input', help='URI of EventError stream')
ap.add_argument('output', nargs='+', help='URIs of outputs')
ap.add_argument(
    '--output-invalid',
    const=True,
    default=False,
    nargs='?',
    action='store',
    help='URI of output stream for invalid events. '
    'If this is given without a value, the first of the output URIs will be '
    'used to write invalid events.  Invalid events are written using the '
    'EventError schema.'
)

args = ap.parse_args()

setup_logging()


def write_event_error(
    writer,
    raw_event,
    error_message,
    error_code,
    parsed_event=None
):
    """
    Constructs an EventError object and sends it to writer.
    """
    try:
        writer.send(
            create_event_error(
                raw_event,
                error_message,
                error_code,
                parsed_event
            )
        )
    except Exception as e:
        logging.error('Unable to create EventError object: %s' % str(e))


input_stream = get_reader(args.input)
writers_list = []
for output_uri in args.output:
    writers_list.append(get_writer(output_uri))
    logging.info(
        'Replaying EventError stream %s => %s...', args.input, output_uri
    )

if args.output_invalid:
    # If --output-invalid was supplied without a value,
    # use the same writer for both invalid and valid events.
    if args.output_invalid is True:
        args.output_invalid = args.output[0]
        writer_invalid = writers_list[0]
    else:
        writer_invalid = get_writer(args.output_invalid)
else:
    writer_invalid = None


replay_success_count = 0
replay_fail_count = 0

for event_error in input_stream:
    if event_error.schema_name() != 'EventError':
        logging.error('Failed replaying event {0}.  Cannot only replay')
        continue

    raw_event = event_error['event']['rawEvent']
    try:
        failed_event = Event.factory(raw_event)
    except Exception as e:
        logging.error(
            'Failed parsing rawEvent.  Skipping. {0}.  \'{1}\''.format(
                e, raw_event
            )
        )
        if writer_invalid:
            write_event_error(
                writer_invalid, raw_event, str(e), 'replay'
            )
        replay_fail_count += 1
        continue

    logging.debug('Replaying {0}. Original failed reason: {1}.'.format(
        failed_event,
        event_error['event']['message'],
    ))
    for writer in writers_list:
        writer.send(failed_event)
    replay_success_count += 1

logging.info(
    'Done replaying EventErrors stream {0}. '
    'Replayed: {1}, Failed: {2}'.format(
        args.input,
        replay_success_count,
        replay_fail_count
    )
)
