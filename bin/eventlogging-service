#!/usr/bin/env python
# -*- coding: utf-8 -*-

import argparse
import logging
import os
import signal
import textwrap

from eventlogging import setup_logging
from eventlogging.service import (
    EventLoggingService, init_schemas_and_topic_config
)

if EventLoggingService.__doc__:
    argparse_doc = EventLoggingService.__doc__
else:
    argparse_doc = ''

ap = argparse.ArgumentParser(
    description=textwrap.dedent(argparse_doc),
    formatter_class=argparse.RawTextHelpFormatter,
    fromfile_prefix_chars='@'
)

ap.add_argument(
    '--port',
    default='8085',
    help='Port on which to listen for requests.',
)

ap.add_argument(
    '--schemas-path',
    default=os.path.join(
        os.path.dirname(os.path.dirname(__file__)),
        'config',
        'schemas',
        'jsonschema',
    ),
    help='Path to local schema repository',
)

ap.add_argument(
    '--topic-config',
    default='./config/topics.yaml',
    help='Topic -> schema config file',
)

ap.add_argument(
    '--log-config',
    default=None,
    help='Python logging config file',
)

ap.add_argument(
    '--num-processes',
    default=1,
    help='Number of tornado processes to spawn.  0 will start as many'
    'processes as there are cores.  Default 1.',
)

ap.add_argument(
    '--error-output',
    default=None,
    help='URI of output stream for errored events. '
    'Errored events are written using the EventError schema.'
)

ap.add_argument('output', nargs='+', help='URIs of output streams.')


if __name__ == "__main__":
    args = ap.parse_args()

    setup_logging(config_file=args.log_config)

    # Initialize topic_config and schema_cache with schemas from local files.
    init_schemas_and_topic_config(args.topic_config, args.schemas_path)

    # Register a SIGHUP handler to reload all schemas
    # and topic_config on SIGHUP.
    def sighup_handler(signum, frame):
        logging.info('Got SIGHUP, reloading topic_config and local schemas...')
        init_schemas_and_topic_config(args.topic_config, args.schemas_path)

    signal.signal(signal.SIGHUP, sighup_handler)

    service = EventLoggingService(
        args.output,
        args.error_output,
    )
    # Start listening for requests.
    service.start(args.port, args.num_processes)
